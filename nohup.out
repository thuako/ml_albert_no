

**************  start new model : GoogLeNet ******************
Files already downloaded and verified
SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0005
) GoogLeNet(
  (conv1): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
      (1): ReLU()
    )
  )
  (conv2): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
    )
  )
  (conv3): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1))
      (1): ReLU()
    )
  )
  (inception3a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception3b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 96, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (maxpool3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception4a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(480, 192, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 96, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(96, 208, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(16, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception4b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 160, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(112, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(24, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception4c): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(24, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception4d): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 144, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(144, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception4e): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(528, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 160, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception5a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(832, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 160, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (inception5b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(832, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 192, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 48, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(48, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU()
        )
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.4, inplace=False)
  (fc): Linear(in_features=1024, out_features=10, bias=True)
)
Epoch [1] Loss: 2.2961  Epoch time : 43.7489
[Test set] Average loss: 0.0092, Accuracy: 1815/10000 (18.15%)

Epoch [2] Loss: 2.0118  Epoch time : 42.6119
[Test set] Average loss: 0.0081, Accuracy: 2290/10000 (22.90%)

Epoch [3] Loss: 1.9231  Epoch time : 42.5678
[Test set] Average loss: 0.0077, Accuracy: 2632/10000 (26.32%)

Epoch [4] Loss: 1.8489  Epoch time : 42.6141
[Test set] Average loss: 0.0072, Accuracy: 2822/10000 (28.22%)

Epoch [5] Loss: 1.8845  Epoch time : 42.6128
[Test set] Average loss: 0.0070, Accuracy: 3336/10000 (33.36%)

Epoch [6] Loss: 1.7429  Epoch time : 42.6326
[Test set] Average loss: 0.0065, Accuracy: 3794/10000 (37.94%)

Epoch [7] Loss: 1.5387  Epoch time : 42.6102
[Test set] Average loss: 0.0064, Accuracy: 3929/10000 (39.29%)

Epoch [8] Loss: 1.4780  Epoch time : 42.6186
[Test set] Average loss: 0.0061, Accuracy: 4269/10000 (42.69%)

Epoch [9] Loss: 1.5394  Epoch time : 42.6551
[Test set] Average loss: 0.0058, Accuracy: 4537/10000 (45.37%)

Epoch [10] Loss: 1.5885  Epoch time : 42.6407
[Test set] Average loss: 0.0057, Accuracy: 4640/10000 (46.40%)

Epoch [11] Loss: 1.2525  Epoch time : 42.6157
[Test set] Average loss: 0.0055, Accuracy: 4909/10000 (49.09%)

Epoch [12] Loss: 1.2755  Epoch time : 42.6639
[Test set] Average loss: 0.0055, Accuracy: 4969/10000 (49.69%)

Epoch [13] Loss: 1.2498  Epoch time : 42.6762
[Test set] Average loss: 0.0052, Accuracy: 5223/10000 (52.23%)

Epoch [14] Loss: 1.1953  Epoch time : 42.6392
[Test set] Average loss: 0.0050, Accuracy: 5405/10000 (54.05%)

Epoch [15] Loss: 1.0949  Epoch time : 42.6711
[Test set] Average loss: 0.0047, Accuracy: 5726/10000 (57.26%)

Epoch [16] Loss: 1.0358  Epoch time : 42.6687
[Test set] Average loss: 0.0046, Accuracy: 5785/10000 (57.85%)

Epoch [17] Loss: 1.1274  Epoch time : 42.6602
[Test set] Average loss: 0.0046, Accuracy: 5883/10000 (58.83%)

Epoch [18] Loss: 0.9379  Epoch time : 42.6755
[Test set] Average loss: 0.0046, Accuracy: 5912/10000 (59.12%)

Epoch [19] Loss: 0.8485  Epoch time : 42.6663
[Test set] Average loss: 0.0052, Accuracy: 5511/10000 (55.11%)

Epoch [20] Loss: 1.4066  Epoch time : 42.6969
[Test set] Average loss: 0.0045, Accuracy: 6030/10000 (60.30%)

Epoch [21] Loss: 1.0025  Epoch time : 42.6786
[Test set] Average loss: 0.0041, Accuracy: 6367/10000 (63.67%)

Epoch [22] Loss: 0.8953  Epoch time : 42.7306
[Test set] Average loss: 0.0037, Accuracy: 6681/10000 (66.81%)

Epoch [23] Loss: 0.8936  Epoch time : 42.7041
[Test set] Average loss: 0.0037, Accuracy: 6663/10000 (66.63%)

Epoch [24] Loss: 0.7966  Epoch time : 42.6835
[Test set] Average loss: 0.0036, Accuracy: 6820/10000 (68.20%)

Epoch [25] Loss: 0.8699  Epoch time : 42.6319
[Test set] Average loss: 0.0035, Accuracy: 6942/10000 (69.42%)

Epoch [26] Loss: 0.8195  Epoch time : 42.6617
[Test set] Average loss: 0.0033, Accuracy: 7037/10000 (70.37%)

Epoch [27] Loss: 0.8741  Epoch time : 42.6263
[Test set] Average loss: 0.0034, Accuracy: 7001/10000 (70.01%)

Epoch [28] Loss: 0.7789  Epoch time : 42.6262
[Test set] Average loss: 0.0031, Accuracy: 7215/10000 (72.15%)

Epoch [29] Loss: 0.6272  Epoch time : 42.6537
[Test set] Average loss: 0.0031, Accuracy: 7239/10000 (72.39%)

Epoch [30] Loss: 0.9302  Epoch time : 42.6241
[Test set] Average loss: 0.0035, Accuracy: 7007/10000 (70.07%)

Epoch [31] Loss: 0.6707  Epoch time : 42.6174
[Test set] Average loss: 0.0032, Accuracy: 7300/10000 (73.00%)

Epoch [32] Loss: 0.9087  Epoch time : 42.6339
[Test set] Average loss: 0.0029, Accuracy: 7430/10000 (74.30%)

Epoch [33] Loss: 1.0455  Epoch time : 42.6655
[Test set] Average loss: 0.0033, Accuracy: 7246/10000 (72.46%)

Epoch [34] Loss: 0.5318  Epoch time : 42.6325
[Test set] Average loss: 0.0029, Accuracy: 7482/10000 (74.82%)

Epoch [35] Loss: 0.6051  Epoch time : 42.6148
[Test set] Average loss: 0.0031, Accuracy: 7419/10000 (74.19%)

Epoch [36] Loss: 0.7000  Epoch time : 42.6348
[Test set] Average loss: 0.0030, Accuracy: 7375/10000 (73.75%)

Epoch [37] Loss: 0.6387  Epoch time : 42.6239
[Test set] Average loss: 0.0028, Accuracy: 7563/10000 (75.63%)

Epoch [38] Loss: 0.6924  Epoch time : 42.6231
[Test set] Average loss: 0.0032, Accuracy: 7368/10000 (73.68%)

Epoch [39] Loss: 0.5976  Epoch time : 42.6343
[Test set] Average loss: 0.0027, Accuracy: 7714/10000 (77.14%)

Epoch [40] Loss: 0.6541  Epoch time : 42.6410
[Test set] Average loss: 0.0027, Accuracy: 7728/10000 (77.28%)

Epoch [41] Loss: 0.6165  Epoch time : 42.6744
[Test set] Average loss: 0.0032, Accuracy: 7399/10000 (73.99%)

Epoch [42] Loss: 0.5601  Epoch time : 42.6677
[Test set] Average loss: 0.0029, Accuracy: 7540/10000 (75.40%)

Epoch [43] Loss: 0.7097  Epoch time : 42.7145
[Test set] Average loss: 0.0031, Accuracy: 7406/10000 (74.06%)

Epoch [44] Loss: 0.4916  Epoch time : 42.6558
[Test set] Average loss: 0.0028, Accuracy: 7641/10000 (76.41%)

Epoch [45] Loss: 0.6773  Epoch time : 42.6555
[Test set] Average loss: 0.0029, Accuracy: 7596/10000 (75.96%)

Epoch [46] Loss: 0.6727  Epoch time : 42.6431
[Test set] Average loss: 0.0023, Accuracy: 7996/10000 (79.96%)

Epoch [47] Loss: 0.5599  Epoch time : 42.6456
[Test set] Average loss: 0.0025, Accuracy: 7804/10000 (78.04%)

Epoch [48] Loss: 0.5000  Epoch time : 42.6206
[Test set] Average loss: 0.0024, Accuracy: 7970/10000 (79.70%)

Epoch [49] Loss: 0.4554  Epoch time : 42.6132
[Test set] Average loss: 0.0025, Accuracy: 7967/10000 (79.67%)

Epoch [50] Loss: 0.5009  Epoch time : 42.6099
[Test set] Average loss: 0.0025, Accuracy: 7880/10000 (78.80%)

Epoch [51] Loss: 0.4780  Epoch time : 42.6164
[Test set] Average loss: 0.0023, Accuracy: 8118/10000 (81.18%)

Epoch [52] Loss: 0.3267  Epoch time : 42.6153
[Test set] Average loss: 0.0027, Accuracy: 7858/10000 (78.58%)

Epoch [53] Loss: 0.6371  Epoch time : 42.6175
[Test set] Average loss: 0.0023, Accuracy: 8062/10000 (80.62%)

Epoch [54] Loss: 0.5519  Epoch time : 42.5976
[Test set] Average loss: 0.0029, Accuracy: 7697/10000 (76.97%)

Epoch [55] Loss: 0.4148  Epoch time : 42.6430
[Test set] Average loss: 0.0026, Accuracy: 7953/10000 (79.53%)

Epoch [56] Loss: 0.5212  Epoch time : 42.5878
[Test set] Average loss: 0.0026, Accuracy: 7878/10000 (78.78%)

Epoch [57] Loss: 0.4995  Epoch time : 42.5727
[Test set] Average loss: 0.0023, Accuracy: 8157/10000 (81.57%)

Epoch [58] Loss: 0.5506  Epoch time : 42.6280
[Test set] Average loss: 0.0022, Accuracy: 8181/10000 (81.81%)

Epoch [59] Loss: 0.3530  Epoch time : 42.6201
[Test set] Average loss: 0.0026, Accuracy: 7915/10000 (79.15%)

Epoch [60] Loss: 0.4690  Epoch time : 42.6044
[Test set] Average loss: 0.0024, Accuracy: 8057/10000 (80.57%)

Epoch [61] Loss: 0.4325  Epoch time : 42.6315
[Test set] Average loss: 0.0023, Accuracy: 8061/10000 (80.61%)

Epoch [62] Loss: 0.6374  Epoch time : 42.6313
[Test set] Average loss: 0.0022, Accuracy: 8187/10000 (81.87%)

Epoch [63] Loss: 0.3478  Epoch time : 42.6348
[Test set] Average loss: 0.0021, Accuracy: 8222/10000 (82.22%)

Epoch [64] Loss: 0.4423  Epoch time : 42.6298
[Test set] Average loss: 0.0025, Accuracy: 8070/10000 (80.70%)

Epoch [65] Loss: 0.3048  Epoch time : 42.5879
[Test set] Average loss: 0.0022, Accuracy: 8284/10000 (82.84%)

Epoch [66] Loss: 0.2558  Epoch time : 42.5860
[Test set] Average loss: 0.0024, Accuracy: 8185/10000 (81.85%)

Epoch [67] Loss: 0.3021  Epoch time : 42.6252
[Test set] Average loss: 0.0023, Accuracy: 8254/10000 (82.54%)

Epoch [68] Loss: 0.2868  Epoch time : 42.6133
[Test set] Average loss: 0.0022, Accuracy: 8322/10000 (83.22%)

Epoch [69] Loss: 0.3710  Epoch time : 42.5850
[Test set] Average loss: 0.0025, Accuracy: 8115/10000 (81.15%)

Epoch [70] Loss: 0.2166  Epoch time : 42.6301
[Test set] Average loss: 0.0027, Accuracy: 7851/10000 (78.51%)

Epoch [71] Loss: 0.2190  Epoch time : 42.6234
[Test set] Average loss: 0.0025, Accuracy: 8203/10000 (82.03%)

Epoch [72] Loss: 0.3332  Epoch time : 42.6145
[Test set] Average loss: 0.0024, Accuracy: 8234/10000 (82.34%)

Epoch [73] Loss: 0.3035  Epoch time : 42.6016
[Test set] Average loss: 0.0021, Accuracy: 8345/10000 (83.45%)

Epoch [74] Loss: 0.3070  Epoch time : 42.5972
[Test set] Average loss: 0.0022, Accuracy: 8323/10000 (83.23%)

Epoch [75] Loss: 0.2049  Epoch time : 42.6271
[Test set] Average loss: 0.0023, Accuracy: 8266/10000 (82.66%)

Epoch [76] Loss: 0.1985  Epoch time : 42.6035
[Test set] Average loss: 0.0021, Accuracy: 8416/10000 (84.16%)

Epoch [77] Loss: 0.2687  Epoch time : 42.6277
[Test set] Average loss: 0.0022, Accuracy: 8355/10000 (83.55%)

Epoch [78] Loss: 0.1965  Epoch time : 42.5769
[Test set] Average loss: 0.0022, Accuracy: 8383/10000 (83.83%)

Epoch [79] Loss: 0.2499  Epoch time : 42.6153
[Test set] Average loss: 0.0024, Accuracy: 8307/10000 (83.07%)

Epoch [80] Loss: 0.2267  Epoch time : 42.5904
[Test set] Average loss: 0.0022, Accuracy: 8356/10000 (83.56%)

Epoch [81] Loss: 0.3524  Epoch time : 42.5727
[Test set] Average loss: 0.0021, Accuracy: 8331/10000 (83.31%)

Epoch [82] Loss: 0.2057  Epoch time : 42.5849
[Test set] Average loss: 0.0022, Accuracy: 8318/10000 (83.18%)

Epoch [83] Loss: 0.1953  Epoch time : 42.6403
[Test set] Average loss: 0.0025, Accuracy: 8277/10000 (82.77%)

Epoch [84] Loss: 0.3166  Epoch time : 42.6110
[Test set] Average loss: 0.0020, Accuracy: 8435/10000 (84.35%)

Epoch [85] Loss: 0.2272  Epoch time : 42.6228
[Test set] Average loss: 0.0023, Accuracy: 8396/10000 (83.96%)

Epoch [86] Loss: 0.3824  Epoch time : 42.5934
[Test set] Average loss: 0.0025, Accuracy: 8240/10000 (82.40%)

Epoch [87] Loss: 0.2362  Epoch time : 42.5877
[Test set] Average loss: 0.0022, Accuracy: 8369/10000 (83.69%)

Epoch [88] Loss: 0.2015  Epoch time : 42.5838
[Test set] Average loss: 0.0021, Accuracy: 8457/10000 (84.57%)

Epoch [89] Loss: 0.1393  Epoch time : 42.6070
[Test set] Average loss: 0.0023, Accuracy: 8299/10000 (82.99%)

Epoch [90] Loss: 0.2408  Epoch time : 42.6135
[Test set] Average loss: 0.0022, Accuracy: 8427/10000 (84.27%)

Epoch [91] Loss: 0.3365  Epoch time : 42.6142
[Test set] Average loss: 0.0020, Accuracy: 8501/10000 (85.01%)

Epoch [92] Loss: 0.2723  Epoch time : 42.6096
[Test set] Average loss: 0.0035, Accuracy: 7794/10000 (77.94%)

Epoch [93] Loss: 0.2355  Epoch time : 42.5933
[Test set] Average loss: 0.0022, Accuracy: 8452/10000 (84.52%)

Epoch [94] Loss: 0.1389  Epoch time : 42.5769
[Test set] Average loss: 0.0029, Accuracy: 8088/10000 (80.88%)

Epoch [95] Loss: 0.4652  Epoch time : 42.6133
[Test set] Average loss: 0.0025, Accuracy: 8150/10000 (81.50%)

Epoch [96] Loss: 0.1874  Epoch time : 42.6360
[Test set] Average loss: 0.0024, Accuracy: 8378/10000 (83.78%)

Epoch [97] Loss: 0.2603  Epoch time : 42.6189
[Test set] Average loss: 0.0021, Accuracy: 8550/10000 (85.50%)

Epoch [98] Loss: 0.1603  Epoch time : 42.6142
[Test set] Average loss: 0.0026, Accuracy: 8387/10000 (83.87%)

Epoch [99] Loss: 0.2386  Epoch time : 42.6263
[Test set] Average loss: 0.0027, Accuracy: 8234/10000 (82.34%)

Epoch [100] Loss: 0.2351  Epoch time : 42.6062
[Test set] Average loss: 0.0022, Accuracy: 8483/10000 (84.83%)

Time ellapsed in training is: 4524.156973361969
save dir : /home/tjrgh/Project/ML_albert_no/Result/GoogLeNet/19_9_57


**************  start new model : GoogLeNet_w_bn ******************
Files already downloaded and verified
SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0005
) GoogLeNet(
  (conv1): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): BasicConv2d(
    (conv): Sequential(
      (0): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1))
      (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (inception3a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception3b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 96, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (maxpool3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception4a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(480, 192, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 96, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(96, 208, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(208, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(16, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(480, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception4b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 160, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(112, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(24, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception4c): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(24, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception4d): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(512, 112, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 144, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(144, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception4e): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(528, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 160, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(528, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=True)
  (inception5a): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(832, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 160, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(160, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(32, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (inception5b): Inception(
    (branch1): BasicConv2d(
      (conv): Sequential(
        (0): Conv2d(832, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (branch2): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 192, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch3): Sequential(
      (0): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 48, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(48, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
    (branch4): Sequential(
      (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      (1): BasicConv2d(
        (conv): Sequential(
          (0): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.4, inplace=False)
  (fc): Linear(in_features=1024, out_features=10, bias=True)
)
/opt/conda/lib/python3.7/site-packages/torch/storage.py:34: FutureWarning: pickle support for Storage will be removed in 1.5. Use `torch.save` instead
  warnings.warn("pickle support for Storage will be removed in 1.5. Use `torch.save` instead", FutureWarning)
Epoch [1] Loss: 1.7355  Epoch time : 47.9687
[Test set] Average loss: 0.0065, Accuracy: 4122/10000 (41.22%)

Epoch [2] Loss: 1.1287  Epoch time : 47.8869
[Test set] Average loss: 0.0051, Accuracy: 5597/10000 (55.97%)

Epoch [3] Loss: 1.0241  Epoch time : 48.0395
[Test set] Average loss: 0.0048, Accuracy: 5886/10000 (58.86%)

Epoch [4] Loss: 0.8520  Epoch time : 48.0228
[Test set] Average loss: 0.0042, Accuracy: 6380/10000 (63.80%)

Epoch [5] Loss: 0.5387  Epoch time : 47.9328
[Test set] Average loss: 0.0038, Accuracy: 6722/10000 (67.22%)

Epoch [6] Loss: 0.6180  Epoch time : 48.0204
[Test set] Average loss: 0.0034, Accuracy: 7188/10000 (71.88%)

Epoch [7] Loss: 0.8260  Epoch time : 47.9641
[Test set] Average loss: 0.0035, Accuracy: 7101/10000 (71.01%)

Epoch [8] Loss: 0.5523  Epoch time : 47.9590
[Test set] Average loss: 0.0027, Accuracy: 7777/10000 (77.77%)

Epoch [9] Loss: 0.4836  Epoch time : 47.9606
[Test set] Average loss: 0.0026, Accuracy: 7838/10000 (78.38%)

Epoch [10] Loss: 0.5557  Epoch time : 48.0189
[Test set] Average loss: 0.0044, Accuracy: 6836/10000 (68.36%)

Epoch [11] Loss: 0.5946  Epoch time : 47.9788
[Test set] Average loss: 0.0025, Accuracy: 7994/10000 (79.94%)

Epoch [12] Loss: 0.4723  Epoch time : 47.9278
[Test set] Average loss: 0.0026, Accuracy: 7943/10000 (79.43%)

Epoch [13] Loss: 0.2325  Epoch time : 47.9605
[Test set] Average loss: 0.0025, Accuracy: 8025/10000 (80.25%)

Epoch [14] Loss: 0.3488  Epoch time : 47.9143
[Test set] Average loss: 0.0025, Accuracy: 8047/10000 (80.47%)

Epoch [15] Loss: 0.5092  Epoch time : 47.9391
[Test set] Average loss: 0.0026, Accuracy: 8092/10000 (80.92%)

Epoch [16] Loss: 0.3497  Epoch time : 47.9100
[Test set] Average loss: 0.0026, Accuracy: 8104/10000 (81.04%)

Epoch [17] Loss: 0.2076  Epoch time : 47.9468
[Test set] Average loss: 0.0028, Accuracy: 8021/10000 (80.21%)

Epoch [18] Loss: 0.5436  Epoch time : 47.9453
[Test set] Average loss: 0.0030, Accuracy: 7870/10000 (78.70%)

Epoch [19] Loss: 0.2288  Epoch time : 47.9298
[Test set] Average loss: 0.0023, Accuracy: 8304/10000 (83.04%)

Epoch [20] Loss: 0.2500  Epoch time : 47.9863
[Test set] Average loss: 0.0027, Accuracy: 8155/10000 (81.55%)

Epoch [21] Loss: 0.3685  Epoch time : 47.9508
[Test set] Average loss: 0.0024, Accuracy: 8307/10000 (83.07%)

Epoch [22] Loss: 0.2177  Epoch time : 47.9632
[Test set] Average loss: 0.0035, Accuracy: 7955/10000 (79.55%)

Epoch [23] Loss: 0.1977  Epoch time : 47.9477
[Test set] Average loss: 0.0027, Accuracy: 8210/10000 (82.10%)

Epoch [24] Loss: 0.2674  Epoch time : 47.9304
[Test set] Average loss: 0.0027, Accuracy: 8281/10000 (82.81%)

Epoch [25] Loss: 0.1056  Epoch time : 47.9558
[Test set] Average loss: 0.0024, Accuracy: 8355/10000 (83.55%)

Epoch [26] Loss: 0.2991  Epoch time : 47.9658
[Test set] Average loss: 0.0036, Accuracy: 7853/10000 (78.53%)

Epoch [27] Loss: 0.1741  Epoch time : 47.9068
[Test set] Average loss: 0.0023, Accuracy: 8474/10000 (84.74%)

Epoch [28] Loss: 0.1257  Epoch time : 47.9398
[Test set] Average loss: 0.0029, Accuracy: 8291/10000 (82.91%)

Epoch [29] Loss: 0.1397  Epoch time : 47.9431
[Test set] Average loss: 0.0022, Accuracy: 8517/10000 (85.17%)

Epoch [30] Loss: 0.0424  Epoch time : 47.8938
[Test set] Average loss: 0.0026, Accuracy: 8383/10000 (83.83%)

Epoch [31] Loss: 0.0674  Epoch time : 47.9799
[Test set] Average loss: 0.0027, Accuracy: 8410/10000 (84.10%)

Epoch [32] Loss: 0.1673  Epoch time : 47.8596
[Test set] Average loss: 0.0022, Accuracy: 8613/10000 (86.13%)

Epoch [33] Loss: 0.1539  Epoch time : 47.9366
[Test set] Average loss: 0.0025, Accuracy: 8436/10000 (84.36%)

Epoch [34] Loss: 0.1487  Epoch time : 47.9478
[Test set] Average loss: 0.0029, Accuracy: 8324/10000 (83.24%)

Epoch [35] Loss: 0.0542  Epoch time : 47.9570
[Test set] Average loss: 0.0022, Accuracy: 8607/10000 (86.07%)

Epoch [36] Loss: 0.2126  Epoch time : 47.9561
[Test set] Average loss: 0.0027, Accuracy: 8398/10000 (83.98%)

Epoch [37] Loss: 0.1963  Epoch time : 47.9360
[Test set] Average loss: 0.0025, Accuracy: 8563/10000 (85.63%)

Epoch [38] Loss: 0.0680  Epoch time : 47.9501
[Test set] Average loss: 0.0032, Accuracy: 8270/10000 (82.70%)

Epoch [39] Loss: 0.1166  Epoch time : 47.9537
[Test set] Average loss: 0.0021, Accuracy: 8683/10000 (86.83%)

Epoch [40] Loss: 0.0967  Epoch time : 47.9312
[Test set] Average loss: 0.0023, Accuracy: 8598/10000 (85.98%)

Epoch [41] Loss: 0.0295  Epoch time : 47.9370
[Test set] Average loss: 0.0024, Accuracy: 8621/10000 (86.21%)

Epoch [42] Loss: 0.0630  Epoch time : 47.9433
[Test set] Average loss: 0.0028, Accuracy: 8428/10000 (84.28%)

Epoch [43] Loss: 0.0773  Epoch time : 47.9326
[Test set] Average loss: 0.0025, Accuracy: 8563/10000 (85.63%)

Epoch [44] Loss: 0.0684  Epoch time : 47.9793
[Test set] Average loss: 0.0029, Accuracy: 8441/10000 (84.41%)

Epoch [45] Loss: 0.0709  Epoch time : 47.9956
[Test set] Average loss: 0.0025, Accuracy: 8569/10000 (85.69%)

Epoch [46] Loss: 0.0815  Epoch time : 47.9765
[Test set] Average loss: 0.0027, Accuracy: 8523/10000 (85.23%)

Epoch [47] Loss: 0.1996  Epoch time : 47.9538
[Test set] Average loss: 0.0022, Accuracy: 8734/10000 (87.34%)

Epoch [48] Loss: 0.0921  Epoch time : 47.9141
[Test set] Average loss: 0.0026, Accuracy: 8562/10000 (85.62%)

Epoch [49] Loss: 0.0653  Epoch time : 47.9386
[Test set] Average loss: 0.0032, Accuracy: 8281/10000 (82.81%)

Epoch [50] Loss: 0.0403  Epoch time : 47.9387
[Test set] Average loss: 0.0025, Accuracy: 8578/10000 (85.78%)

Epoch [51] Loss: 0.1081  Epoch time : 47.8916
[Test set] Average loss: 0.0027, Accuracy: 8524/10000 (85.24%)

Epoch [52] Loss: 0.1710  Epoch time : 47.9888
[Test set] Average loss: 0.0023, Accuracy: 8698/10000 (86.98%)

Epoch [53] Loss: 0.1161  Epoch time : 47.9838
[Test set] Average loss: 0.0024, Accuracy: 8697/10000 (86.97%)

Epoch [54] Loss: 0.0904  Epoch time : 47.9493
[Test set] Average loss: 0.0025, Accuracy: 8658/10000 (86.58%)

Epoch [55] Loss: 0.0491  Epoch time : 47.9570
[Test set] Average loss: 0.0025, Accuracy: 8563/10000 (85.63%)

Epoch [56] Loss: 0.0787  Epoch time : 47.9382
[Test set] Average loss: 0.0024, Accuracy: 8662/10000 (86.62%)

Epoch [57] Loss: 0.1015  Epoch time : 48.0013
[Test set] Average loss: 0.0023, Accuracy: 8652/10000 (86.52%)

Epoch [58] Loss: 0.0346  Epoch time : 47.9540
[Test set] Average loss: 0.0022, Accuracy: 8701/10000 (87.01%)

Epoch [59] Loss: 0.0180  Epoch time : 47.9875
[Test set] Average loss: 0.0030, Accuracy: 8415/10000 (84.15%)

Epoch [60] Loss: 0.0414  Epoch time : 47.9690
[Test set] Average loss: 0.0023, Accuracy: 8695/10000 (86.95%)

Epoch [61] Loss: 0.0966  Epoch time : 47.9295
[Test set] Average loss: 0.0021, Accuracy: 8739/10000 (87.39%)

Epoch [62] Loss: 0.0104  Epoch time : 47.9409
[Test set] Average loss: 0.0024, Accuracy: 8610/10000 (86.10%)

Epoch [63] Loss: 0.0856  Epoch time : 47.9724
[Test set] Average loss: 0.0025, Accuracy: 8634/10000 (86.34%)

Epoch [64] Loss: 0.1722  Epoch time : 47.9499
[Test set] Average loss: 0.0023, Accuracy: 8657/10000 (86.57%)

Epoch [65] Loss: 0.0277  Epoch time : 47.9267
[Test set] Average loss: 0.0023, Accuracy: 8631/10000 (86.31%)

Epoch [66] Loss: 0.0614  Epoch time : 47.9259
[Test set] Average loss: 0.0025, Accuracy: 8593/10000 (85.93%)

Epoch [67] Loss: 0.1915  Epoch time : 47.8955
[Test set] Average loss: 0.0022, Accuracy: 8791/10000 (87.91%)

Epoch [68] Loss: 0.0273  Epoch time : 47.9190
[Test set] Average loss: 0.0026, Accuracy: 8558/10000 (85.58%)

Epoch [69] Loss: 0.0387  Epoch time : 47.9445
[Test set] Average loss: 0.0022, Accuracy: 8738/10000 (87.38%)

Epoch [70] Loss: 0.0504  Epoch time : 47.8887
[Test set] Average loss: 0.0025, Accuracy: 8618/10000 (86.18%)

Epoch [71] Loss: 0.0171  Epoch time : 47.9731
[Test set] Average loss: 0.0028, Accuracy: 8527/10000 (85.27%)

Epoch [72] Loss: 0.0381  Epoch time : 47.9424
[Test set] Average loss: 0.0028, Accuracy: 8507/10000 (85.07%)

Epoch [73] Loss: 0.0802  Epoch time : 48.0489
[Test set] Average loss: 0.0030, Accuracy: 8443/10000 (84.43%)

Epoch [74] Loss: 0.0452  Epoch time : 47.9264
[Test set] Average loss: 0.0024, Accuracy: 8653/10000 (86.53%)

Epoch [75] Loss: 0.0581  Epoch time : 47.9441
[Test set] Average loss: 0.0022, Accuracy: 8719/10000 (87.19%)

Epoch [76] Loss: 0.0334  Epoch time : 47.9044
[Test set] Average loss: 0.0025, Accuracy: 8618/10000 (86.18%)

Epoch [77] Loss: 0.0708  Epoch time : 47.9163
[Test set] Average loss: 0.0020, Accuracy: 8814/10000 (88.14%)

Epoch [78] Loss: 0.0382  Epoch time : 47.9690
[Test set] Average loss: 0.0020, Accuracy: 8825/10000 (88.25%)

Epoch [79] Loss: 0.0414  Epoch time : 47.9459
[Test set] Average loss: 0.0024, Accuracy: 8647/10000 (86.47%)

Epoch [80] Loss: 0.0886  Epoch time : 47.9644
[Test set] Average loss: 0.0022, Accuracy: 8718/10000 (87.18%)

Epoch [81] Loss: 0.1308  Epoch time : 47.9731
[Test set] Average loss: 0.0021, Accuracy: 8715/10000 (87.15%)

Epoch [82] Loss: 0.0580  Epoch time : 47.9140
[Test set] Average loss: 0.0026, Accuracy: 8527/10000 (85.27%)

Epoch [83] Loss: 0.0254  Epoch time : 47.9405
[Test set] Average loss: 0.0022, Accuracy: 8735/10000 (87.35%)

Epoch [84] Loss: 0.0545  Epoch time : 47.9702
[Test set] Average loss: 0.0022, Accuracy: 8700/10000 (87.00%)

Epoch [85] Loss: 0.0186  Epoch time : 47.9342
[Test set] Average loss: 0.0020, Accuracy: 8812/10000 (88.12%)

Epoch [86] Loss: 0.0497  Epoch time : 47.9723
[Test set] Average loss: 0.0030, Accuracy: 8392/10000 (83.92%)

Epoch [87] Loss: 0.0588  Epoch time : 47.9378
[Test set] Average loss: 0.0020, Accuracy: 8781/10000 (87.81%)

Epoch [88] Loss: 0.0179  Epoch time : 47.9405
[Test set] Average loss: 0.0025, Accuracy: 8582/10000 (85.82%)

Epoch [89] Loss: 0.0094  Epoch time : 47.9852
[Test set] Average loss: 0.0024, Accuracy: 8570/10000 (85.70%)

Epoch [90] Loss: 0.0401  Epoch time : 47.9482
[Test set] Average loss: 0.0023, Accuracy: 8667/10000 (86.67%)

Epoch [91] Loss: 0.1044  Epoch time : 48.0057
[Test set] Average loss: 0.0022, Accuracy: 8703/10000 (87.03%)

Epoch [92] Loss: 0.0509  Epoch time : 47.9694
[Test set] Average loss: 0.0021, Accuracy: 8769/10000 (87.69%)

Epoch [93] Loss: 0.0206  Epoch time : 47.9546
[Test set] Average loss: 0.0021, Accuracy: 8705/10000 (87.05%)

Epoch [94] Loss: 0.0409  Epoch time : 47.9676
[Test set] Average loss: 0.0022, Accuracy: 8748/10000 (87.48%)

Traceback (most recent call last):
  File "main.py", line 69, in <module>
    utils.train(hyper_param_dict, model, device)
  File "/home/tjrgh/Project/ML_albert_no/utils/train.py", line 62, in train
    optimizer.step()
  File "/opt/conda/lib/python3.7/site-packages/torch/autograd/grad_mode.py", line 15, in decorate_context
    return func(*args, **kwargs)
  File "/opt/conda/lib/python3.7/site-packages/torch/optim/sgd.py", line 99, in step
    d_p = d_p.add(p, alpha=weight_decay)
KeyboardInterrupt
